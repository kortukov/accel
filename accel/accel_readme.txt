3 скрипта для работы с данными акселерометра. Они используют данные video_data для того, чтобы считать разметку по эпохам. 
Поэтому перед их использованием нужно убедиться в корректности и обновлённости .txt файлов в папке hustle_01,
video_data файлов в папке clean_data, а также ann файлов в папке ann. Если ещё не запускали, то нужно 
запустить скрипты hustle_labels.m, synchro.m и final_labels.m, чтобы получить разметку по эпохам.

reading_accel_data.m читает данные акселерометра с помощью ann и set файлов и формирует структуру
data, в которой есть имя субъекта и номер сессии, а также матрица(в матлабе это на самом деле массив структур)
data_matrix, в которой есть данные о номере эпохи, сигнал акселерометра, его производная, время,
тайминг начала и конца эпохи, какой был ответ 2 или -2, epoch_labels - было ли метание, производная по 5 мс, 
critical - было ли в эпохе большое событие(критическая или нет), время от первого большого события до конца эпохи.
Ещё в структуре data, есть число эпох с метаниями и без метаний.

threshold_accel_data.m  находит для тех файлов, у которых есть разметка оптимальный порог критического события, и
записывает в структуру data. Оптимальный в смысле максимизации true positive - критических с метаниями и минимизации false positive - 
критических без метания. Строим ROC-кривую и ищем наиболее удалённую от диагонали точку.

applying_threshold.m  Сейчас может выполнять две функции (вторая закомментирована)
1. Записать критические времена в таблицу в папке feat_tables_global, это надо делать дважды, закомментировав и откомментировав разные участки кода,
соотвественно для индивидуального порога по испытуемым (из 1-ой сессии) и для среднего порога по всем испытуемым.
2. Ещё этот скрипт умеет строить красивые графики значений производной акселерометра после большого события, рисуя метания красным, не метания синим.
